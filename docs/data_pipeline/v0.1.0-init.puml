@startuml
participant Frontend
participant Backend
participant Postgres
participant Redis


== WS connection ==
Frontend -> Backend: WS: api/ws/chat/{id}/connect
Backend -> Backend: create group "chat/id"
Backend --> Frontend: WS: ok

== get chats with last message==
Frontend -> Backend: HTTP GET: /api/chats/ (auth_token)
Backend -> Postgres: PSQL: Get user by token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chats by user.id
Postgres --> Backend: PSQL: chats (contains last_msg)
Backend --> Frontend: HTTP: 200


== Create chat ==
Frontend -> Backend: HTTP POST: /api/chats/ (user_id + auth_token)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get chats by user.id where chat.is_dialog is true and chats doesn't contains companion user

alt chat exists
Postgres --> Backend: PSQL: chats
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: None
Backend -> Postgres: PSQL: create new_chat
Postgres --> Backend: PSQL: new_chat
Backend -> Postgres: PSQL: get ChatUser by user.id and new_chat.id
Postgres --> backend: PSQL: ChatUser
Backend --> Postgres: Update ChatUser.role = RoleEnum.owner
Backend --> Frontend: HTTP: new_chat


== Get messages with pagination ==
Frontend -> Backend: HTTP GET: /api/chats/{id}/messages/ (auth_token + limit + offset)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get messages by id with limit offset pagination filter
Postgres --> Backend: PSQL: messages
Backend --> Frontend: messages


== Add message to chat with real-time updating==
Frontend -> Backend: HTTP POST: /api/chat/{id}/ (text + reply_to) (auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Backend: Check if text or pic not None

alt text is None or blank
Backend --x Frontend: HTTP: 400
end alt

Backend -> Postgres: PSQL: get chat by id
Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: insert new message to chat
Postgres --> Backend: PSQL: message
Backend -> Frontend: WS: "chat/id" group (new_message + messages)
Backend --> Frontend: HTTP: 201


== Delete Message ==
Frontend -> Backend: HTTP DELETE: /api/chats/{chat_id}messages/{id}/ (auth_token)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Delete message by id
Postgres --> Backend: PSQL: ok
Backend -> Frontend: WS DELETE: "chat/chat_id" group (messages)
Backend --> Frontend: HTTP: 204


== Forward message ==
Frontend -> Backend: HTTP POST: /api/messages/forward/ (message_ids + forward_to_id + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get messages by id using id__in(message_ids)
Postgres --> Backend: PSQL: messages_to_forward
loop for message in messages_to_forward
Backend -> Backend: message.forward_by = user.id and clean id or copy obj
end loop
Backend -> Postgres: PSQL: get dialog by forward_to_id
Postgres --> Backend: PSQL: dialog
Backend -> Postgres: PSQL: Insert new_message
Postgres --> Backend: PSQL: message
Backend -> Frontend: WS: "chat/forward_to_id" group (new_message + messages)
Backend --> Frontend: HTTP: 201

== Registration ==
Frontend -> Backend: HTTP POST: /api/auth/sign_up/ (registration_model)
Backend -> Postgres: PSQL: Get user by registration_model.email

alt User with similar email exists
Postgres --x Backend: PSQL: User
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: PSQL: None
Backend -> Postgres: PSQL: Insert new_user
Postgres --> Backend: PSQL: new_user
Backend --> Frontend: HTTP: new_user


== login ==
Frontend -> Backend: HTTP POST: /api/auth/login/ (login_model)
Backend -> Postgres: PSQL: Get user by login_model.email
Postgres --> Backend: PSQL: user_data_to_compare
Backend -> Backend: Compare data from Frontend and Postgres

alt data is not similar
Backend --x Frontend: HTTP: 400
end alt

Backend --> Frontend: HTTP: Token


== Get users with pagination ==
Frontend -> Backend: HTTP GET: /api/users/ (limit + offset + email + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get users on limit + offset + email filter
Postgres --> Backend: PSQL:users
Backend --> Frontend: users

== Upload profile picture ==
Frontend -> Backend: HTTP POST: /api/users/{id}/ (profile_picture + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Backend: save profile_picture to media storage
Backend -> Postgres: PSQL: Update user.profile_picture = profile_picture
Postgres --> Backend: PSQL OK
Backend --> Frontend: HTTP: 200


== add attachment ==
Frontend -> Backend: HTTP POST: /api/attachments (auth_token+ attachment)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chat by attachment.chat_id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: save attachment.file to media storage
Postgres --> Backend: PSQL: attachment

Backend -> Frontend: WS: CREATE: attachment
Backend --> Frontend: HTTP: 201

== Delete attachment ==
Frontend -> Backend: HTTP DELETE: /api/attachments/{attachment_id}
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get attachment by attachment_id

alt attachment not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: attachment
Backend -> Postgres: PSQL: Get chat by attachment.chat.id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat
Backend -> Backend: chat.users contains user

alt user isn't member of the chat
Backend --x Frontend: HTTP: 400
end alt

Backend -> Postgres: PSQL: Delete attachment
Postgres --> Backend: PSQL: OK
Backend -> Frontend: WS: DELETE: attachment deleted
Backend --> Frontend: HTTP: 204

== Get attachments with pagination ==
Frontend -> Backend: HTTP GET: /api/chats/{id}/attachments (limit + offset + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chat by id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: get attachments with limit offset
Postgres --> Backend: PSQL:  attachments
Backend --> Frontend: HTTP: 200

== set user role in chat ==
Frontend -> Backend: HTTP PATCH: /api/chats/{id}/users/{user_id} (auth_token + new_role)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by id user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not RoleEnum.owner or RoleEnum.admin
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: get role by id user_id
Postgres --> Backend: PSQL: role
Backend -> Backend: check role

alt role is RoleEnum.owner (owner role is immutable)
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: Get chat_user by id and user_id

alt chat_user not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres -> Backend: PSQL: chat_user
Backend -> Postgres: PSQL: Update chat_user.role = new_role
Postgres --> Backend: PSQL: OK
Backend --> Frontend: HTTP: 204

== add user to chat ==
Frontend -> Backend: HTTP PATCH: /api/chats/{id}/users (user_ids + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by id user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not owner or admin
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: Get chat by id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: get new_chat_users by user_ids
Postgres --> Backend: PSQL: new_chat_users
Backend -> Postgres: PSQL: Update chat.users append new_chat_users
Postgres --> Backend: PSQL: OK
Backend --> Frontend: HTTP: 204

== delete user from chat ==
Frontend -> Backend: HTTP DELETE: /api/chats/{id}/users/{user_id} (auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by id user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not RoleEnum.owner or RoleEnum.admin
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: get role by id user_id
Postgres --> Backend: PSQL: role
Backend -> Backend: check role

alt role is RoleEnum.owner (owner role is immutable)
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: remove chat_user by id and user_id

alt chat_user not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: OK
Backend --> Frontend: HTTP: 204
@enduml