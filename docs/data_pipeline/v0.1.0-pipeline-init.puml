@startuml
participant Frontend
participant Backend
participant Postgres
participant Redis


== WS connection ==
Frontend -> Backend: WS: api/ws/{existing_url}/
Backend -> Redis: RESP: add group where group_name = consumer.get_group_name
Redis --> Backend: RESP: OK
Backend --> Frontend: WS: OK

== get chats with last message==
Frontend -> Backend: HTTP GET: /api/chats/ (auth_token)
Backend -> Postgres: PSQL: Get user by token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chats by user.id
Postgres --> Backend: PSQL: chats (contains last_msg)
Backend --> Frontend: HTTP: chats


== Create chat ==
Frontend -> Backend: HTTP POST: /api/chats/ (user_ids + auth_token)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get chats by user.id and user_ids where chat.is_dialog = true

alt chat exists
Postgres --> Backend: PSQL: chats
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: None
Backend -> Postgres: PSQL: create new_chat
Postgres --> Backend: PSQL: new_chat
Backend -> Postgres: PSQL: get chat_user by user.id and new_chat.id
Postgres --> Backend: PSQL: chat_user
Backend --> Postgres: PSQL: Update chat_user.role = ChatRoleEnum.OWNER
Postgres --> Backend: PSQL: chat_user
Backend --> Frontend: HTTP: new_chat


== Get messages with pagination ==
Frontend -> Backend: HTTP GET: /api/chats/{id}/messages/ (auth_token + limit + offset)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get messages by id with limit offset pagination filter
Postgres --> Backend: PSQL: messages
Backend --> Frontend: HTTP: messages


== Add message to chat ==
Frontend -> Backend: HTTP POST: /api/messages (text + chat_id + reply_to_message_id + reply_to_attachment_id) (auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Backend: Check if text is blank or None

alt text is None or blank
Backend --x Frontend: HTTP: 400
end alt

alt reply_to_message_id is not None
Backend -> Postgres: PSQL: Get reply_to_message by reply_to_message_id

alt reply_to_message not found
Postgres --> Backend: Not found
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: reply_to_message
Backend -> Backend: message.reply_to_message = reply_to_message
end alt

alt reply_to_attachment_id is not None
Backend -> Postgres: PSQL: Get reply_to_attachment by reply_to_attachment_id

alt attachment not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: reply_to_attachment
Backend -> Backend: message.reply_to_attachment = reply_to_attachment
end alt

Backend -> Postgres: PSQL: get chat by chat_id
Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: add message
Postgres --> Backend: PSQL: message
Backend -> Frontend: WS: CREATE: message
Backend --> Frontend: HTTP: message


== Delete Message ==
Frontend -> Backend: HTTP DELETE: /api/messages/{id}/ (auth_token)
Backend -> Postgres: PSQL: get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Postgres: PSQL: get message by id

alt message not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: message
Backend -> Postgres: PSQL: get user_chat by user.pk message.chat.pk

alt user is not a member of the message.chat
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: user_chat
Backend -> Backend: user_chat.role is ChatRoleEnum.OWNER or user is message.author

alt user is not chat owner or message.author
Backend --x Frontend: HTTP: 400
end alt

Backend -> Postgres: PSQL: Delete message by id
Postgres --> Backend: PSQL: ok
Backend -> Frontend: WS DELETE: message
Backend --> Frontend: HTTP: 204


== Forward message ==
Frontend -> Backend: HTTP POST: /api/messages/forward/ (message_ids + forward_to_id + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Postgres: PSQL: get chat by forward_to_id

alt chat not found
Postgres --> Backend: PSQL: None
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat

Backend -> Postgres: PSQL: Get messages_to_forward by message_ids
Postgres --> Backend: PSQL: messages_to_forward

loop for message in messages_to_forward
Backend -> Backend: message.forward_by = user.id
Backend -> Backend: message.chat = chat
end loop

Backend -> Postgres: PSQL: add new_messages
Postgres --> Backend: PSQL: new_messages
Backend -> Frontend: WS: CREATE: new_messages
Backend --> Frontend: HTTP: new_messages

== Forward attachments ==
Frontend -> Backend: HTTP POST: /api/attachments/forward/ (attachment_ids + forward_to_id + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Postgres: PSQL: get chat by forward_to_id

alt chat not found
Postgres --> Backend: PSQL: None
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat

Backend -> Postgres: PSQL: Get attachments_to_forward by attachment_ids
Postgres --> Backend: PSQL: attachments_to_forward

loop for attachment in attachments_to_forward
Backend -> Backend: attachment.forward_by = user.id
Backend -> Backend: attachment.chat = chat
end loop

Backend -> Postgres: PSQL: add new_attachments
Postgres --> Backend: PSQL: new_attachments
Backend -> Frontend: WS: CREATE: new_attachments
Backend --> Frontend: HTTP: new_attachments

== Registration ==
Frontend -> Backend: HTTP POST: /api/auth/sign_up/ (email+password)
Backend -> Postgres: PSQL: Get user by email

alt User with similar email exists
Postgres --x Backend: PSQL: User
Backend --x Frontend: HTTP: 400
end alt

Postgres --> Backend: PSQL: None
Backend -> Postgres: PSQL: add new_user
Postgres --> Backend: PSQL: new_user
Backend --> Frontend: HTTP: new_user


== login ==
Frontend -> Backend: HTTP POST: /api/auth/login/ (email+password)
Backend -> Postgres: PSQL: Get user by email

alt user not found
Postgres --x Backend: PSQL: Not found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: user_data
Backend -> Backend: Compare password  with user_data.password

alt data is not similar
Backend --x Frontend: HTTP: 400
end alt

Backend --> Frontend: HTTP: Token


== Get users with pagination ==
Frontend -> Backend: HTTP GET: /api/users/ (limit + offset + email + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get users with limit + offset + email filter
Postgres --> Backend: PSQL:users
Backend --> Frontend: users

== Upload profile picture ==
Frontend -> Backend: HTTP POST: /api/users/{id}/profile_picture (profile_picture + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user

Backend -> Backend: save profile_picture to media storage
Backend -> Postgres: PSQL: Update user.profile_picture = profile_picture
Postgres --> Backend: PSQL OK
Backend --> Frontend: HTTP: user


== add attachment ==
Frontend -> Backend: HTTP POST: /api/attachments (auth_token + file + chat_id + reply_to_message_id + reply_to_attachment_id)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chat by attachment.chat.id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat

alt reply_to_message is not None
Backend -> Postgres: PSQL: Get reply_to_message by reply_to_message_id

alt reply_to_message not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: reply_to_message
Backend -> Backend: attachment.reply_to_message = reply_to_message
end alt

alt reply_to_attachment is not None
Backend -> Postgres: PSQL: Get reply_to_attachment by reply_to_attachment_id

alt attachment not found
Postgres --> Backend: PSQL: Not found
Backend --> Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: reply_to_attachment
Backend -> Backend: attachment.reply_to_attachment = reply_to_attachment
end alt

Backend -> Backend: attachment.author = user
Backend -> Backend: save attachment.file to media storage
Backend -> Postgres: PSQL: add attachment
Postgres --> Backend: PSQL: attachment

Backend -> Frontend: WS: CREATE: attachment
Backend --> Frontend: HTTP: attachment

== Delete attachment ==
Frontend -> Backend: HTTP DELETE: /api/attachments/{id}
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get attachment by id

alt attachment not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: attachment
Backend -> Postgres: PSQL: Get chat by attachment.chat.id
Postgres --> Backend: PSQL: chat
Backend -> Backend: chat.users contains user

alt user isn't member of the chat
Backend --x Frontend: HTTP: 400
end alt

Backend -> Postgres: PSQL: Delete attachment
Postgres --> Backend: PSQL: OK
Backend -> Frontend: WS: DELETE: attachment
Backend --> Frontend: HTTP: 204

== Get attachments with pagination ==
Frontend -> Backend: HTTP GET: /api/chats/{id}/attachments (limit + offset + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: Get chat by id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: get attachments with limit offset filters
Postgres --> Backend: PSQL:  attachments
Backend --> Frontend: HTTP: attachments

== set user role in chat ==
Frontend -> Backend: HTTP PATCH: /api/chats/{id}/users/{user_id} (auth_token + new_role)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not ChatRoleEnum.owner or RoleEnum.admin
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: get role by user_id
Postgres --> Backend: PSQL: role
Backend -> Backend: check role

alt role is ChatRoleEnum.owner (owner role is immutable)
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: Get chat_user by id and user_id

alt chat_user not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres -> Backend: PSQL: chat_user
Backend -> Postgres: PSQL: Update chat_user.role = new_role
Postgres --> Backend: PSQL: chat_user
Backend --> Frontend: HTTP: chat_user

== add users to chat ==
Frontend -> Backend: HTTP PATCH: /api/chats/{id}/users (user_ids + auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not ChatRoleEnum.OWNER or ChatRoleEnum.ADMIN
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: Get chat by id

alt chat not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: chat
Backend -> Postgres: PSQL: get new_chat_users by user_ids
Postgres --> Backend: PSQL: new_chat_users
Backend -> Postgres: PSQL: Update chat.users append new_chat_users
Postgres --> Backend: PSQL: users
Backend --> Frontend: HTTP: users

== delete user from chat ==
Frontend -> Backend: HTTP DELETE: /api/chats/{id}/users/{user_id} (auth_token)
Backend -> Postgres: PSQL: Get user by auth_token

alt token not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 401
end alt

Postgres --> Backend: PSQL: user
Backend -> Postgres: PSQL: get role by user.id
Postgres --> Backend: PSQL: role

Backend -> Backend: check role
alt role is not ChatRoleEnum.owner or RoleEnum.admin
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: get role by id user_id
Postgres --> Backend: PSQL: role
Backend -> Backend: check role

alt role is ChatRoleEnum.owner (owner role is immutable)
Backend --x Frontend: HTTP: 403
end alt

Backend -> Postgres: PSQL: remove chat_user by id and user_id

alt chat_user not found
Postgres --x Backend: PSQL: Not Found
Backend --x Frontend: HTTP: 404
end alt

Postgres --> Backend: PSQL: OK
Backend --> Frontend: HTTP: 204
@enduml